1.Lambda Expressions
----------------------
Lambda expression provides implementation of functional interface. 
An interface which has only one abstract method is called functional interface. 
Java provides an anotation @FunctionalInterface, 
which is used to declare an interface as functional interface.
 *********************************************************************************
 2.Method reference
 ----------------
 Method reference is used to refer method of functional interface. 
 It is compact and easy form of lambda expression. 
 Each time when you are using lambda expression to just referring a method, 
 you can replace your lambda expression with method reference.
 
There are following types of method references in java:
1.Reference to a static method.
2.Reference to an instance method.
3.Reference to a constructor.
***********************************************************************************
Functional Interface
---------------------
An Interface that contains exactly one abstract method is known as functional interface. 
It can have any number of default, static methods but can contain only one abstract method. 
Functional Interface is also known as Single Abstract Method Interfaces or SAM Interfaces. 
It is a new feature in Java, which helps to achieve functional programming approach.
A functional interface can extends another interface only when it does not have any abstract method.
******************************************************************************************
Base64
--------
Java provides a class Base64 to deal with encryption. 
You can encrypt and decrypt your data by using provided methods. 
You need to import java.util.Base64 in your source file to use its methods..
********************************************************************************
Java Default Methods
--------------------
Java provides a facility to create default methods inside the interface.
 Methods which are defined inside the interface and tagged with default 
 are known as default methods.These methods are non-abstract methods.
 **********************************************************************************
 ForEach Loop
 -------------
 Java provides a new method forEach() to iterate the elements. 
 It is defined in Iterable and Stream interface. 
 It is a default method defined in the Iterable interface. 
 Collection classes which extends Iterable interface can use forEach loop to iterate elements.
 This method takes a single parameter which is a functional interface. 
 So, you can pass lambda expression as an argument.
 
 Along with forEach() method, Java provides one more method forEachOrdered(). 
 It is used to iterate elements in the order specified by the stream.
 *****************************************************************************************
 git fetch vs pull
 -----------------
 If we use git pull changes will be directly reflected to our local repo
 git pull
 but git fetch it will just fetch the changes,in order to get the changes to our local.
 then we have to use
 git fetch origin
 git merge
********************************************************************************************
Collectors
-----------
Collectors is a final class that extends Object class.
********************************************************************************************
Stream API
---------
Stream API is a way to express and process collections of objects. 
Enable us to perform operations like filtering, mapping,reducing and sorting.
********************************************************************************
what are the three main parts of Lambda Expression in java?
(argument-list) -> {body}  
1) Argument-list/Parameter list: It can be empty or non-empty as well.
2) Arrow-token/Lambda arrow operatore-> It is used to link arguments-list and body of expression.
3) Body: It contains expressions and statements for lambda expression.
*******************************************************************
Data Type of Lambda Expression is Functional Interface.
In most of the cases this is java.lang.Runnable Interface
**********************************************************
Why did oracle release a new version of java like java8??
Functional Programming
Cloud Computing
Big Data
Optional
**************************************************************************
why do we need Functional Interface in Java???
  Functional Interfaces are mainly used in Lambda Expressions,Method References
  and Constructor references.
***************************************************************************
Predicate
---------------
It is a functional interface which represents a predicate 
(boolean-valued function) of one argument. 
It is defined in the java.util.function package and 
contains test() a functional method.
****************************************************************************
Java Optional Class
---------------------
Java introduced a new class Optional in jdk8. 
It is a public final class and used to deal 
with NullPointerException in Java application. 
You must import java.util package to use this class. 
*****************************************************************************

Git CI/CD
Continuous Integration/Delivery/Deployment

When the Developers or Developer team integrate their code/merge their into a
common repository,after that integration some unit tests or basic tests are 
executed to check whether the integration is successful and application is 
working fine.until this process is called Continuous Integration.

Deploying this integrated code to the testing environment and running some
QA tests or acceptance test,until this stage is called Continuous Delivery.
because after running the acceptance test,the product/software is ready
for delivery.

then we add production deployment to this process is called Continuous Deployment
All these stages are automated and works with the automated trigger.
********************************************************************************* 



