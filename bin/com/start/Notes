1.Lambda Expressions
----------------------
Lambda expression provides implementation of functional interface. 
An interface which has only one abstract method is called functional interface. 
Java provides an anotation @FunctionalInterface, 
which is used to declare an interface as functional interface.
 *********************************************************************************
 2.Method reference
 ----------------
 Method reference is used to refer method of functional interface. 
 It is compact and easy form of lambda expression. 
 Each time when you are using lambda expression to just referring a method, 
 you can replace your lambda expression with method reference.
 
There are following types of method references in java:
1.Reference to a static method.
2.Reference to an instance method.
3.Reference to a constructor.
***********************************************************************************
Functional Interface
---------------------
An Interface that contains exactly one abstract method is known as functional interface. 
It can have any number of default, static methods but can contain only one abstract method. 
Functional Interface is also known as Single Abstract Method Interfaces or SAM Interfaces. 
It is a new feature in Java, which helps to achieve functional programming approach.
A functional interface can extends another interface only when it does not have any abstract method.
******************************************************************************************
Base64
--------
Java provides a class Base64 to deal with encryption. 
You can encrypt and decrypt your data by using provided methods. 
You need to import java.util.Base64 in your source file to use its methods..
********************************************************************************
Java Default Methods
--------------------
Java provides a facility to create default methods inside the interface.
 Methods which are defined inside the interface and tagged with default 
 are known as default methods.These methods are non-abstract methods.
 **********************************************************************************
